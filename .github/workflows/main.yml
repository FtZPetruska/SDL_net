name: Build

on: [push, pull_request]

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: Windows (MSVC+CMake),         os: windows-latest, shell: sh,   cmake: '-GNinja', msvc: 1 }
        - { name: Windows (mingw32+autotools),  os: windows-latest, shell: 'msys2 {0}', msystem: mingw32, msys-env: mingw-w64-i686 }
        - { name: Windows (mingw64+CMake),      os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64, cmake: '-G "Ninja Multi-Config"' }
        - { name: Linux (autotools),            os: ubuntu-20.04,   shell: sh }
        - { name: Linux (CMake),                os: ubuntu-20.04,   shell: sh,   cmake: '-GNinja' }
        - { name: 'Linux (CMake, static)',      os: ubuntu-20.04,   shell: sh,   cmake: '-DBUILD_SHARED_LIBS=OFF -GNinja' }
        - { name: macOS (autotools),            os: macos-latest,   shell: sh }
        - { name: macOS (CMake),                os: macos-latest,   shell: sh,   cmake: '-GNinja' }

    steps:
    - name: Set up MSYS2
      if: matrix.platform.shell == 'msys2 {0}'
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.platform.msystem }}
        install: >-
          ${{ matrix.platform.msys-env }}-SDL2
          ${{ matrix.platform.msys-env }}-autotools
          ${{ matrix.platform.msys-env }}-cmake
          ${{ matrix.platform.msys-env }}-gcc
          ${{ matrix.platform.msys-env }}-ninja
          ${{ matrix.platform.msys-env }}-pkg-config

    - name: Setup macOS dependencies
      if: runner.os == 'macOS'
      run: |
          brew install \
            autoconf \
            automake \
            ninja \
            pkg-config \
            sdl2 \
            ${NULL+}

    - name: Setup Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install \
          autoconf \
          automake \
          cmake \
          libsdl2-dev \
          ninja-build \
          pkg-config \
          ${NULL+}

    - uses: actions/checkout@v2

    - name: Setup MSVC dependencies
      if: "matrix.platform.msvc"
      shell: pwsh
      run: |
        .github/fetch_sdl_vc.ps1
        echo "SDL2_DIR=$Env:GITHUB_WORKSPACE/SDL2-devel-VC" >> $Env:GITHUB_ENV
    - name: Setup Ninja for MSVC
      if: "matrix.platform.msvc"
      uses: ashutoshvarma/setup-ninja@master
      with:
        version: 1.10.2
    - uses: ilammy/msvc-dev-cmd@v1
      if: "matrix.platform.msvc"
      with:
        arch: x64

    - name: Check that versioning is consistent
      # We only need to run this once: arbitrarily use the Linux/CMake build
      if: "runner.os == 'Linux' && matrix.platform.cmake"
      run: ./test-versioning.sh

    - name: Configure CMake
      if: "matrix.platform.cmake"
      run: |
        set -eu
        cmake -S . \
          -B build \
          -DBUILD_SHARED_LIBS=ON \
          -DCMAKE_BUILD_TYPE=Release \
          -DSDL2NET_SHOWINTERFACES=ON \
          ${{ matrix.platform.cmake }}

    - name: Build with CMake
      if: "matrix.platform.cmake"
      run: cmake --build build/ --config Release --parallel --verbose

    - name: Install with CMake
      if: "matrix.platform.shell == 'sh' && matrix.platform.cmake"
      run: |
        set -eu
        rm -fr DESTDIR-cmake
        DESTDIR=$(pwd)/DESTDIR-cmake cmake --install build/ --config Release
        find DESTDIR-cmake | LC_ALL=C sort -u

    - name: Configure Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        ./autogen.sh
        ./configure

    - name: Build with Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" V=1

    - name: Install with Autotools
      if: "! matrix.platform.cmake"
      run: |
        set -eu
        curdir="$(pwd)"
        parallel="$(getconf _NPROCESSORS_ONLN)"
        rm -fr DESTDIR-autotools
        mkdir DESTDIR-autotools
        make -j"${parallel}" install DESTDIR="${curdir}/DESTDIR-autotools" V=1
        ( cd DESTDIR-autotools; find ) | LC_ALL=C sort -u

    - name: Distcheck with Autotools
      if: "runner.os == 'Linux' && ! matrix.platform.cmake"
      run: |
        set -eu
        parallel="$(getconf _NPROCESSORS_ONLN)"
        make -j"${parallel}" distcheck V=1
